import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as h,b as r}from"./app-ho35QjFc.js";const d={},i=r('<h1 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h1><p>数组是一种线性数据结构，它由一组连续的内存空间组成，用于存储同一类型的数据元素。</p><h2 id="数组的主要优点包括" tabindex="-1"><a class="header-anchor" href="#数组的主要优点包括" aria-hidden="true">#</a> 数组的主要优点包括：</h2><h3 id="_1-直接访问" tabindex="-1"><a class="header-anchor" href="#_1-直接访问" aria-hidden="true">#</a> 1. 直接访问</h3><p>可以通过索引直接访问数组中的元素，时间复杂度为O(1)。</p><h3 id="_2-灵活操作" tabindex="-1"><a class="header-anchor" href="#_2-灵活操作" aria-hidden="true">#</a> 2. 灵活操作</h3><p>可以通过索引对数组中的元素进行增加、删除、修改等操作。</p><h3 id="_3-空间有效利用" tabindex="-1"><a class="header-anchor" href="#_3-空间有效利用" aria-hidden="true">#</a> 3. 空间有效利用</h3><p>在创建数组时，会预分配足够的内存空间用于存储元素，可以有效利用内存空间。</p><h2 id="数组的主要缺点包括" tabindex="-1"><a class="header-anchor" href="#数组的主要缺点包括" aria-hidden="true">#</a> 数组的主要缺点包括：</h2><h3 id="_1-大小固定" tabindex="-1"><a class="header-anchor" href="#_1-大小固定" aria-hidden="true">#</a> 1. 大小固定</h3><p>数组的大小在创建时就需要确定，并且不能动态改变，如果需要存储更多的元素，需要重新创建一个更大的数组。</p><h3 id="_2-无法插入中间元素" tabindex="-1"><a class="header-anchor" href="#_2-无法插入中间元素" aria-hidden="true">#</a> 2. 无法插入中间元素</h3><p>如果需要在数组的中间插入元素，需要将后面的元素都向后移动一位，时间复杂度为O(n)。</p><h3 id="_3-无法删除中间元素" tabindex="-1"><a class="header-anchor" href="#_3-无法删除中间元素" aria-hidden="true">#</a> 3. 无法删除中间元素</h3><p>如果需要删除数组中的中间元素，需要将后面的元素都向前移动一位，时间复杂度为O(n)。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>综上所述，数组适用于元素数量固定且需要直接访问的场景，但是不适用于需要动态增加或删除元素的场景。</p>',18),n=[i];function t(c,s){return e(),h("div",null,n)}const p=a(d,[["render",t],["__file","数组.html.vue"]]);export{p as default};
